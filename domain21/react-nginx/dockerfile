# syntax=docker/dockerfile:1.4

# 1. For build React app
FROM localhost:8082/hydrogen-bullseye:lts AS development

# Set working directory
WORKDIR /app

# 
COPY ./react-nginx/react-app/package.json /app/package.json
COPY ./react-nginx/react-app/package-lock.json /app/package-lock.json

# Same as npm install
RUN npm ci

COPY ./react-nginx/react-app /app

ENV CI=true
ENV PORT=3000

CMD [ "npm", "start" ]


FROM development AS build
RUN npm run build


FROM development as dev-envs
RUN <<EOF
apt-get update
apt-get install -y --no-install-recommends git
EOF

RUN <<EOF
useradd -s /bin/bash -m vscode
groupadd docker
usermod -aG docker vscode
EOF

# install Docker tools (cli, buildx, compose)
COPY --from=gloursdocker/docker / /
CMD [ "npm", "start" ]

# 2. For Nginx setup
FROM nginx

RUN cat /etc/os-release

# Install samba, kerberos and required utils
RUN apt update && apt upgrade -y && \
  DEBIAN_FRONTEND=noninteractive \
  apt install \
    samba \
    krb5-user \
    netcat iputils-ping iproute2 -y

# Install some dev-useful tools
RUN apt install mc tmux less vim -y

# clean up
RUN apt clean autoclean \
  && apt autoremove -y

# TODO find a better solution
# Workaround default smb.conf issue
# RUN rm /etc/samba/smb.conf \
#     && apt-get -f install

# Copy samba scripts
RUN mkdir -p /usr/local/sbin
COPY samba-utils /usr/local/sbin
WORKDIR /usr/local/sbin

# Copy config nginx
COPY ./react-nginx/nginx/nginx.conf /etc/nginx/conf.d/default.conf

WORKDIR /usr/share/nginx/html

# Remove default nginx static assets
RUN rm -rf ./*

# Copy static assets from builder stage
COPY --from=build /app/build .

# Containers run nginx with global directives and daemon off
ENTRYPOINT ["nginx", "-g", "daemon off;"]

